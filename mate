diff --git a/README.rdoc b/README.rdoc
index 1f7e3eb..05b6080 100644
--- a/README.rdoc
+++ b/README.rdoc
@@ -1,11 +1,12 @@
 = Esearch
 
 == DESCRIPTION
-Esearchy is a small library capable of searching the internet for email addresses. Currently, we the supported search methods are engines such as Google, Bing, Yahoo, PGP servers, GoogleGroups, etc , but I intend to add many more.
+Esearchy is a small library capable of searching the internet for email addresses. Currently, the supported search methods are engines such as Google, Bing, Yahoo, PGP servers, GoogleGroups, Linkedin, etc , but I intend to add many more.
 
 Also, the library searches inside .pdf, .docx, .xlsx, .pptx, asn and .txt files for emails addresses and adds them to the list of found accounts. Finally, we have support for .docs files but for now only in Windows Platforms.
 
-NOTE: In order to work Bing and Yahoo need an appid, for which you will have to create one for each and place them in fles so the library will be able to work properly.
+NOTE: THIS IS STILL BEING DEVELOPED CODE IS SUBMITTED DAILY SO BE AWARE THAT CODE MIGHT NOT WORK PROPERLY AL THE TIME. IF SOMETHING GOES WRONG PLEASE RAISE AN ISSUE.  
+In order to work Bing and Yahoo need an appid, for which you will have to create one for each and place them in fles so the library will be able to work properly.
 * data/yahoo.key
 * data/bing.key
 
@@ -35,12 +36,28 @@ For thouse who want to integrate this to their application you can use it in "th
    domain.save_to_file "~/emails.txt"
  end
 
+
 or in the more classic way in which you can create an Esearchy objetc and work on it
 
   domain = Esearchy.new :query => "domain.com", :maxhits => 500
   domain.search 
   domain.save_to_file "~/emails.txt"
 
+We now also have a LinkedIn search which looks for Names in the site. With those names it 
+* creates emails based on those emails.
+* searches Google and Yahoo for emails related to those people.
+
+  ESearchy.create "domain.co" do |d|
+    d.engines = { "LinkedIn" => Linkedin.new}
+    d.company_name "Visa Corp"
+    d.linkedin_credentials "myuser@linkedin.com", "12345"
+    d.maxhits = 100
+    d.search
+    d.save_to_file "linkedin_emails.txt"
+  end
+
+
+
 == REQUIREMENTS:
 
 * ruby 1.8 or 1.9
@@ -52,6 +69,11 @@ or in the more classic way in which you can create an Esearchy objetc and work o
 
 * sudo gem install freedomcoder-esearchy
 
+== THANKS:
+
+* http://www.penetrationtests.com/ [Penetration Testing Directory]
+* http://www.mundoruby.com.ar/ [Ruby's News Aggregator]
+
 == LICENSE:
 
 (The MIT License)
diff --git a/lib/esearchy.rb b/lib/esearchy.rb
index 445bc30..156255a 100644
--- a/lib/esearchy.rb
+++ b/lib/esearchy.rb
@@ -1,5 +1,5 @@
 local_path = "#{File.dirname(__FILE__) + '/esearchy/'}"
-%w{google bing yahoo PGP keys}.each { |lib| require local_path + lib } 
+%w{google bing yahoo PGP keys linkedin}.each { |lib| require local_path + lib } 
 
 class ESearchy
   def initialize(options={}, &block)
@@ -9,7 +9,8 @@ class ESearchy
     @engines = options[:engines] || {"Google" => Google, 
                                      "Bing" => Bing, 
                                      "Yahoo" => Yahoo,
-                                     "PGP" => PGP }
+                                     "PGP" => PGP,
+                                     "LinkedIn" => Linkedin }
     @engines.each {|n,e| @engines[n] = e.new(@maxhits)}
     @emails = Array.new
     @threads = Array.new
@@ -54,6 +55,17 @@ class ESearchy
     @engines['Bing'].appid = value
   end
   
+  def linkedin_credentials(user, pass)
+    @engines['LinkedIn'].username = user
+    @engines['LinkedIn'].password = pass
+  end
+  alias_method :linkedin_credentials=, :linkedin_credentials
+  
+  def company_name (company)
+    @engines['LinkedIn'].company_name = company
+  end
+  alias_method :company_name=, :company_name
+  
   def save_to_file(file)
     open(file,"a") do |f|
       emails.each { |e| f << e + "\n" }
diff --git a/lib/esearchy/bing.rb b/lib/esearchy/bing.rb
index c94b2b9..b014b82 100644
--- a/lib/esearchy/bing.rb
+++ b/lib/esearchy/bing.rb
@@ -1,6 +1,6 @@
 %w{rubygems json cgi net/http}.each { |lib| require lib }
 local_path = "#{File.dirname(__FILE__)}/"
-%w{searchy keys}.each {|lib| require local_path + lib}
+%w{searchy keys useragent}.each {|lib| require local_path + lib}
 
 class Bing
   include Searchy
@@ -27,7 +27,8 @@ class Bing
       http.start do |http|
         request = Net::HTTP::Get.new("/json.aspx" + "?Appid="+ @appid + 
                                     "&query=" + CGI.escape(query) + 
-                                    "&sources=web&web.count=50&start=#{@start}")
+                                    "&sources=web&web.count=50&start=#{@start}",
+                                    {'Cookie' => UserAgent::fetch})
         response = http.request(request)
         case response
         when Net::HTTPSuccess, Net::HTTPRedirection
diff --git a/lib/esearchy/google.rb b/lib/esearchy/google.rb
index b119fdb..096d6fd 100644
--- a/lib/esearchy/google.rb
+++ b/lib/esearchy/google.rb
@@ -1,6 +1,6 @@
 %w{rubygems cgi net/http}.each { |lib| require lib }
 local_path = "#{File.dirname(__FILE__)}/"
-%w{searchy keys}.each {|lib| require local_path + lib}
+%w{searchy keys useragent}.each {|lib| require local_path + lib}
 
 class Google
   include Searchy
@@ -27,7 +27,8 @@ class Google
       http.start do |http|
         request = Net::HTTP::Get.new( "/cse?&safe=off&num=100&site=" + 
                                        "&q=" + CGI.escape(query) + 
-                                       "&btnG=Search&start=#{@start}")
+                                       "&btnG=Search&start=#{@start}", 
+                                       {'Cookie' => UserAgent::fetch})
         response = http.request(request)
         case response
         when Net::HTTPSuccess, Net::HTTPRedirection
diff --git a/lib/esearchy/googlegroups.rb b/lib/esearchy/googlegroups.rb
index a06c67c..dc56c1e 100644
--- a/lib/esearchy/googlegroups.rb
+++ b/lib/esearchy/googlegroups.rb
@@ -1,6 +1,6 @@
 %w{rubygems cgi net/http}.each { |lib| require lib }
 local_path = "#{File.dirname(__FILE__)}/"
-%w{searchy keys}.each {|lib| require local_path + lib}
+%w{searchy keys useragent}.each {|lib| require local_path + lib}
 
 class GoogleGroups
   include Searchy
@@ -25,7 +25,8 @@ class GoogleGroups
       http.start do |http|
         request = Net::HTTP::Get.new( "/groups/search?&safe=off&num=100" + 
                                        "&q=" + CGI.escape(query) + 
-                                       "&btnG=Search&start=#{@start}")
+                                       "&btnG=Search&start=#{@start}", 
+                                       {'Cookie' => UserAgent::fetch})
         response = http.request(request)
         case response
         when Net::HTTPSuccess, Net::HTTPRedirection
diff --git a/lib/esearchy/linkedin.rb b/lib/esearchy/linkedin.rb
index 23a0cac..f8a104b 100644
--- a/lib/esearchy/linkedin.rb
+++ b/lib/esearchy/linkedin.rb
@@ -1,31 +1,71 @@
-%w{rubygems cgi net/http}.each { |lib| require lib }
+%w{rubygems cgi net/http net/https}.each { |lib| require lib }
 local_path = "#{File.dirname(__FILE__)}/"
-%w{yahoo google}.each {|lib| require local_path + lib}
+%w{yahoo google useragent}.each {|lib| require local_path + lib}
 
 # http:///
 class Linkedin
   include Searchy
   
-  def initialize(maxhits=nil, start=nil)
+  def initialize(maxhits=nil)
     @totalhits = maxhits || 0
     @pages = 1
     @emails = []
     @lock = Mutex.new
-    @start = start || 0
+    @start = 0
     @threads = []
     @lock = Mutex.new
+    @username = String.new
+    @password = String.new
+    @company_name = nil
+    @cookie = nil
+  end
+  attr_accessor :emails, :username, :password, :company_name
+  
+  def login
+    begin
+      http = Net::HTTP.new("www.linkedin.com",443)
+      http.use_ssl = true
+      http.verify_mode = OpenSSL::SSL::VERIFY_NONE
+      http.start do |http|
+        request = Net::HTTP::Post.new("/secure/login",
+                                      {'Content-Type' => "application/x-www-form-urlencoded"})
+        request.body = "session_key=#{@username}" +
+                       "&session_password=#{@password}" +
+                       "&session_login=Sign+In&session_login=&session_rikey="
+        response = http.request(request)
+        case response
+        when Net::HTTPSuccess, Net::HTTPRedirection
+          return response['Set-Cookie']
+        else
+          return response.error!
+        end
+      end
+    rescue Net::HTTPFatalError
+      puts "Error: Something went wrong with the HTTP request"
+    end
   end
-  attr_accessor :emails, :appid
   
   def search(query)
     @query = query
+    begin 
+        @cookie = login
+    rescue
+      puts "Unable to parse Linkedin. Something went Wrong with the Credentials"
+      return nil
+    end
     begin
       http = Net::HTTP.new("www.linkedin.com",80)
       http.start do |http|
-        request = Net::HTTP::Get.new("search?search=&company=" + @query + 
+        #request = Net::HTTP::Get.new("/search?search=&viewCriteria=1&currentCompany=co" + 
+        #          "&searchLocationType=Y&newnessType=Y" +
+        #          "&proposalType=Y&pplSearchOrigin=ADVS&company=#{CGI.escape(@company_name)}" +
+        #          "&sortCriteria=Relevance&page_num=#{@pages}", {'Cookie' => @cookie} )
+        headers = {'Cookie' => @cookie, 'User-Agent' => "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_7; en-us) AppleWebKit/530.19.2 (KHTML, like Gecko) Version/4.0.2 Safari/530.19"}
+        request = Net::HTTP::Get.new("/search?search=&company=" + 
+                                     CGI.escape(@company_name) +
                                      "&currentCompany=currentCompany" + 
                                      "&trk=coprofile_in_network_see_more" + 
-                                     "&page_num=" + @pages)
+                                     "&page_num=" + @pages.to_s, headers)
         response = http.request(request)
         case response
         when Net::HTTPSuccess, Net::HTTPRedirection
@@ -34,12 +74,14 @@ class Linkedin
           if @totalhits > @start
             @pages = @pages + 1
             puts "Searching in: #{self.class} up to point #{@start}"
-            create_emails(response.body)
+            search_people(response.body)
+            create_emails
             sleep(4)
             search(@query)
           else
             puts "Searching in: #{self.class} up to point #{@start}"
-            search_emails(response.body)
+            search_people(response.body)
+            create_emails
           end
         else
           return response.error!
@@ -51,25 +93,33 @@ class Linkedin
   end
 
   def parse(string)
-    @totalhits = string.scan(/<p class="summary>"<strong>(\w)<\/strong>/) if @totalhits == 0
+    @totalhits = string.scan(/<p class="summary>"<strong>(.*)<\/strong>/) if @totalhits == 0
   end
   
   def search_people(string)
-    @people = string.scan(/<spam class="given-name">(*.)<\/spam><spam class="family-name">(*.)<\/spam>)/)
+    @people = string.scan(/span class="given-name">(.*)<\/span>[\n\s]+<span class="family-name">(.*)<\/span>/)
   end
   def search_person(name,last)
-    emails = Yahoo.new(50).search("first:\"#{name}\" last:\"#{last}\"").emails
-    emails.concat(Google.new(50).search("#{name} #{last}").emails).uniq!
+    email = []
+    # Search Yahoo
+    y = Yahoo.new(50)
+    y.search("first:\"#{name}\" last:\"#{last}\"")
+    emails.concat(y.emails).uniq!
+    # Search Google
+    #g = Google.new(50)
+    #g.search("#{name} #{last}")
+    #emails.concat(g.emails).uniq!
+    return emails
   end
     
   def create_emails
-    @domain = + @query.match(/@/) ? @query : ("@" + @query)
+    @domain = @query.match(/@/) ? @query : ("@" + @query)
     @people.each do |person|
-      name = person[0]
-      last = person[1] 
-      @emails << name + last + @domain
-      @emails << name[0] + last + @domain
-      @emails.concat(search_person(name,last))
+      name,last = person 
+      @emails << "#{name.split(' ')[0]}.#{last.split(' ')[0]}#{@domain}"
+      @emails << "#{name.first}#{last.split(' ')[0]}#{@domain}"
+      #@emails.concat(fix(search_person(name,last)))
+      @emails.uniq!
     end 
     print_emails(@emails)
   end
diff --git a/lib/esearchy/yahoo.rb b/lib/esearchy/yahoo.rb
index 09f6e81..26b69a6 100644
--- a/lib/esearchy/yahoo.rb
+++ b/lib/esearchy/yahoo.rb
@@ -1,6 +1,6 @@
 %w{rubygems json cgi net/http}.each { |lib| require lib }
 local_path = "#{File.dirname(__FILE__)}/"
-%w{searchy keys}.each {|lib| require local_path + lib}
+%w{searchy keys useragent}.each {|lib| require local_path + lib}
 
 class Yahoo
   include Searchy
@@ -28,7 +28,7 @@ class Yahoo
         request = Net::HTTP::Get.new("/ysearch/web/v1/" + CGI.escape(query) + 
                                      "?appid="+ @appid + 
                                      "&format=json&count=50"+ 
-                                     "&start=#{@start}" )
+                                     "&start=#{@start}", {'Cookie' => UserAgent::fetch} )
         response = http.request(request)
         case response
         when Net::HTTPSuccess, Net::HTTPRedirection
